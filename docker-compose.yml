services:

  rabbitmq:
    image: rabbitmq:latest
    restart: always
    hostname: rabbitmqhost
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"


  gateway:
    image: nginx:1.25-bookworm
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8000:80"
    depends_on:
      - order-service
      - stock-service
      - payment-service
  stock-service:
    build:
      context: .
      dockerfile: stock-service/Dockerfile
    image: stock-service:latest
    environment:
      - GATEWAY_URL=http://gateway:80
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/stock_redis.env
    depends_on:
      stock-db:
        condition: service_started
  


  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    image: payment-service:latest
    environment:
      - GATEWAY_URL=http://gateway:80
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/payment_redis.env
    depends_on:
      payment-db:
        condition: service_started


  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    image: order-service:latest
    environment:
      - GATEWAY_URL=http://gateway:80
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/order_redis.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      order-db:
        condition: service_started

  order-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb

  stock-consumer:
    build:
      context: .
      dockerfile: stock-consumer/Dockerfile
    image: stock-consumer:latest
    command: python consumer.py
    env_file:
      - env/stock_redis.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      payment-db:
        condition: service_started

  order-consumer:
    build:
      context: .
      dockerfile: order-consumer/Dockerfile
    image: order-consumer:latest
    command: python consumer.py
    env_file:
      - env/order_redis.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      order-db:
        condition: service_started


      

  stock-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb

  payment-consumer:
    build:
      context: .
      dockerfile: payment-consumer/Dockerfile
    image: payment-consumer:latest
    command: python consumer.py
    env_file:
      - env/payment_redis.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      payment-db:
        condition: service_started


  payment-db:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
